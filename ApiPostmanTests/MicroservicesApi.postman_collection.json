{
	"id": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
	"name": "MicroservicesApi",
	"description": "Collection to test API responses in application Microservices Booking",
	"order": [],
	"folders": [
		{
			"id": "ff6fbd67-f57e-80ff-cba6-f1cea4ecb578",
			"name": "Endpoint bookings",
			"description": "",
			"order": [
				"64c15221-780f-06e9-16c2-98a9ba195ab5",
				"e608dfa3-d9b9-bef1-fca5-02ecc1891a64",
				"5e3211d0-8f35-5742-3f51-b65071d920f8",
				"f2e0b77e-7a55-6bc2-d8cf-4670471ecb01",
				"8dbd2f7a-aa6a-b8c3-fe82-6fea063c73a9",
				"cff0809c-0bde-ef22-c446-1b9101b1b837",
				"1f41b0f4-8d41-96d4-ff9c-a0c64693433a",
				"71a50aa6-7d97-ea23-66bc-471b804a671b",
				"c027d9f2-fde0-45a0-9c73-ae3d2478a7fc",
				"66ffbb79-9e0f-f33c-382d-12c29c97e4f3",
				"c675cc9b-b2ca-94f3-0412-06f4be072a3d",
				"f1f67fc7-5de0-e209-cd14-f121b4debb56",
				"b1e5f914-2465-3c6c-8655-fcd95b0b8225",
				"0bf7ec2a-dea1-a8d7-7a2f-cf06635f10e9",
				"c59cd169-35cf-1cab-864f-6f4fc6f417a9",
				"ea0e81fc-f9fc-0eb6-2fc2-0efa34294197"
			],
			"owner": "493551",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f"
		},
		{
			"id": "4d754cd5-cce1-02dd-3a76-72a5881fe844",
			"name": "Endpoint services",
			"description": "",
			"order": [
				"680e0b31-2475-b49d-55a5-f2a72f38ecd4",
				"81a56c17-7a1e-4f25-80f1-c029cd0fa408",
				"5c9bde29-1a99-ae47-03e9-71b1771060e1",
				"8ef1d981-76aa-0d3e-d0a7-e11753fe7aff",
				"ce0c3d9d-ef4b-5a22-b313-cd5d4bdb8130",
				"24cd68e9-7a50-7782-91e2-8bf08dc76c42",
				"1a33d57c-d6c7-c897-da3f-2408cb42395e",
				"8f9b4231-346e-bc97-dedb-e891872bfa95",
				"e9242e1f-6145-8322-39be-28c7f864a2da",
				"7379c63a-1d3e-c39a-0a72-dbf71c42e25e"
			],
			"owner": "493551",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f"
		},
		{
			"id": "1b520b3d-db2e-d6a9-2f9b-d03bed49afd0",
			"name": "Endpoint users",
			"description": "Endpoint used to perform actions on users data.\nFrom this endpoint you can create, edit and delete users. You can also get users list and get details about user.",
			"order": [
				"2a442cf1-3ac3-aedb-4085-afb1e99cd530",
				"31804830-93fe-3500-b073-264792c0bd06",
				"7163699c-e9fb-ffcd-07f4-9ed131e1efa2",
				"dab3ae79-46e2-ad96-1344-9b8e59ba57f6",
				"d6506729-26cf-5c62-b8b4-96d768c751b2",
				"96535e18-895c-90d9-0f34-95c54b487dfe",
				"907f1780-5673-5d0e-a51d-b2c435695ff9",
				"755cf0f9-0159-7ffa-78b7-2b3819468b7b",
				"ff11ccbb-9bca-f229-1a8b-fd61c2fa5847",
				"89be3fa3-9786-53c1-34b0-77de8516a5e7",
				"260a5ca2-d8f7-4717-be3a-9eefb8517760",
				"2eb5c01e-1219-5493-e3c9-57a026ad6e44",
				"5333b76e-3ff3-c16c-748d-2720047d6ec0",
				"47dc3f62-2963-8ba3-6b09-3d0e92924165",
				"ff4b02ee-36b7-051f-32ca-af62e896caef",
				"3f25ad64-9575-97ac-9e1b-869c1a246980",
				"aa79edc9-1772-852d-522b-9649094bb40b",
				"26a8315b-ff78-6fd8-4f11-92ea3fdbdaec",
				"a578f1ed-6802-b0d0-5fa4-22101c82eb26",
				"c66abdf0-d685-c1dd-3216-bd49511c2fe1"
			],
			"owner": "493551",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f"
		}
	],
	"timestamp": 1483375387846,
	"owner": "493551",
	"public": false,
	"requests": [
		{
			"id": "0bf7ec2a-dea1-a8d7-7a2f-cf06635f10e9",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings/{{testBookingId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given description\"] = jsonData.description === environment.testBookingDescription;\ntests[\"Booking object contains given userLogin\"] = jsonData.userLogin === environment.testUserLogin;\ntests[\"Booking object contains given date\"] = jsonData.date === environment.testBookingDate;\ntests[\"Booking object contains given serviceName\"] = jsonData.serviceName === environment.testBookingServiceName;\ntests[\"Booking object contains given id\"] = jsonData.id === environment.testBookingId;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485709468879,
			"name": "GET bookings:id copy",
			"description": "Request should return booking information.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "1a33d57c-d6c7-c897-da3f-2408cb42395e",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/services/{{testServiceName}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given name\"] = jsonData.name === environment.testServiceName;\ntests[\"Response contains given price\"] = jsonData.price == environment.testServicePrice;\ntests[\"Response contains given description\"] = jsonData.description === environment.testServiceDescription;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702422309,
			"name": "GET services:name after edit",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"folder": "4d754cd5-cce1-02dd-3a76-72a5881fe844",
			"rawModeData": ""
		},
		{
			"id": "1f41b0f4-8d41-96d4-ff9c-a0c64693433a",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings/{{testBookingId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485707252135,
			"name": "DELETE bookings:id copy",
			"description": "Endpoint used to remove selected service\n.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "24cd68e9-7a50-7782-91e2-8bf08dc76c42",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/services/{{testServiceName}}",
			"preRequestScript": "function randomizeString(j)\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < j; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\n\npostman.clearEnvironmentVariable('testServiceDescription');\npostman.clearEnvironmentVariable('testServicePrice');\npostman.setEnvironmentVariable('testServiceDescription',randomizeString(50));\npostman.setEnvironmentVariable('testServicePrice',Math.floor(Math.random() * 5000));",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Edited' in response\"] = jsonData.message === 'Edited';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702709918,
			"name": "PUT services",
			"description": "Endpoint used to create new service.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"service\": {\n\t\t\"description\": \"{{testServiceDescription}}\",\n\t\t\"price\": {{testServicePrice}}\n\t}\n}"
		},
		{
			"id": "260a5ca2-d8f7-4717-be3a-9eefb8517760",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484999384156,
			"name": "DELETE users:login",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "26a8315b-ff78-6fd8-4f11-92ea3fdbdaec",
			"headers": "Auth-Token: {{token_2}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926636256,
			"name": "GET users unauthorized",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "2a442cf1-3ac3-aedb-4085-afb1e99cd530",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/authenticate",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains token\"] = jsonData.token;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('token');\npostman.setEnvironmentVariable(\"token\", jsonData.token);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926638840,
			"name": "POST authenticate",
			"description": "Endpoint used to login to application and recieve token.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n\t\t\"login\": \"pbubel\",\n\t\t\"password\": \"pbubel\"\n}"
		},
		{
			"id": "2eb5c01e-1219-5493-e3c9-57a026ad6e44",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\ntests[\"Body contains list\"] = responseBody.has(\"list\");\n\nvar schema = {\n \"list\": {\n \"type\": \"array\"\n }\n};\nvar jsonData = JSON.parse(responseBody);\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testUserLogin){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does not contain removed user login\"] = !contains(jsonData.list);\n\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867487887,
			"name": "GET users when deleted",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n  \"user\":{\n  \"password\": \"aaa\",\n  \"firstName\": \"aaa\",\n  \"lastName\": \"aaa\",\n  \"canManageServices\": true,\n  \"canManageUsers\": true\n}}"
		},
		{
			"id": "31804830-93fe-3500-b073-264792c0bd06",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testUserLogin');\npostman.setEnvironmentVariable('testUserLogin',randomizeString());\npostman.setEnvironmentVariable('testPassword',randomizeString());\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867465809,
			"name": "POST users",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "3f25ad64-9575-97ac-9e1b-869c1a246980",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/authenticate",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains token\"] = jsonData.token;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('token_2');\npostman.setEnvironmentVariable(\"token_2\", jsonData.token);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926627537,
			"name": "POST authenticate 2",
			"description": "Endpoint used to login to application and recieve token.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\"\n}"
		},
		{
			"id": "47dc3f62-2963-8ba3-6b09-3d0e92924165",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Document failed validation' in response\"] = jsonData.message === 'Users Database error: Document failed validation';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867494974,
			"name": "POST users wrong login",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"a test !@#$\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "5333b76e-3ff3-c16c-748d-2720047d6ec0",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Document failed validation' message in response\"] = jsonData.message === 'Users Database error: Document failed validation';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484999381884,
			"name": "POST users wrong body",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\"\n\t}\n}"
		},
		{
			"id": "5c9bde29-1a99-ae47-03e9-71b1771060e1",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/services",
			"preRequestScript": "function randomizeString(j)\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < j; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\n\npostman.clearEnvironmentVariable('testServiceName');\npostman.setEnvironmentVariable('testServiceName',randomizeString(10));\npostman.setEnvironmentVariable('testServiceDescription',randomizeString(50));\npostman.setEnvironmentVariable('testServicePrice',Math.floor(Math.random() * 5000));",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702016830,
			"name": "POST services",
			"description": "Endpoint used to create new service.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"service\": {\n\t\t\"description\": \"{{testServiceDescription}}\",\n\t\t\"price\": {{testServicePrice}},\n\t\t\"name\": \"{{testServiceName}}\"\n\t}\n}"
		},
		{
			"id": "5e3211d0-8f35-5742-3f51-b65071d920f8",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "function randomizeString()\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\nfunction randomizeDate(){\n        var date = \"\";\n        date += '20' + Math.floor(16 + Math.random() * 80) + '-1' + Math.floor(Math.random() * 2) + '-' + Math.floor(10 + Math.random() * 18);\n    return date;\n}\npostman.clearEnvironmentVariable('testServiceName');\npostman.setEnvironmentVariable('testBookingLogin',randomizeString());\npostman.setEnvironmentVariable('testBookingDate',randomizeDate());\npostman.setEnvironmentVariable('testBookingServiceName',randomizeString());\npostman.setEnvironmentVariable('testBookingDescription',randomizeString());",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485706519298,
			"name": "POST bookings",
			"description": "Endpoint used to create new booking.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"booking\": {\n\t\t\"userLogin\": \"{{testBookingLogin}}\",\n\t\t\"date\": \"{{testBookingDate}}\",\n\t\t\"serviceName\": \"{{testBookingServiceName}}\",\n\t\t\"description\": \"{{testBookingDescription}}\"\n\t}\n}"
		},
		{
			"id": "64c15221-780f-06e9-16c2-98a9ba195ab5",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/authenticate",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains token\"] = jsonData.token;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('token');\npostman.setEnvironmentVariable(\"token\", jsonData.token);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926638840,
			"name": "POST authenticate",
			"description": "Endpoint used to login to application and recieve token.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"folder": "ff6fbd67-f57e-80ff-cba6-f1cea4ecb578",
			"rawModeData": "{\n\t\t\"login\": \"pbubel\",\n\t\t\"password\": \"pbubel\"\n}"
		},
		{
			"id": "66ffbb79-9e0f-f33c-382d-12c29c97e4f3",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/authenticate",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains token\"] = jsonData.token;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('token_2');\npostman.setEnvironmentVariable(\"token_2\", jsonData.token);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485707250686,
			"name": "POST authenticate copy",
			"description": "Endpoint used to login to application and recieve token.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\"\n}"
		},
		{
			"id": "680e0b31-2475-b49d-55a5-f2a72f38ecd4",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/authenticate",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains token\"] = jsonData.token;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('token');\npostman.setEnvironmentVariable(\"token\", jsonData.token);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926638840,
			"name": "POST authenticate",
			"description": "Endpoint used to login to application and recieve token.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"folder": "4d754cd5-cce1-02dd-3a76-72a5881fe844",
			"rawModeData": "{\n\t\t\"login\": \"pbubel\",\n\t\t\"password\": \"pbubel\"\n}"
		},
		{
			"id": "7163699c-e9fb-ffcd-07f4-9ed131e1efa2",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'duplicate' in response\"] = jsonData.message.has('duplicate');\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867469221,
			"name": "POST users duplicated login",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "71a50aa6-7d97-ea23-66bc-471b804a671b",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"'list' in response body\"] = jsonData.list;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        tests[\"Booking object contains userLogin\"] = givenJsonArray[i].userLogin;\n        tests[\"Booking object contains date\"] = givenJsonArray[i].date;\n        tests[\"Booking object contains serviceName\"] = givenJsonArray[i].serviceName;\n        tests[\"Booking object contains id\"] = givenJsonArray[i].id;\n        if(givenJsonArray[i].userLogin === environment.testBookingLogin &&\n        givenJsonArray[i].date === environment.testBookingDate &&\n        givenJsonArray[i].serviceName === environment.testBookingServiceName &&\n        givenJsonArray[i].description === environment.testBookingDescription){\n            postman.setEnvironmentVariable(\"testBookingId\", givenJsonArray[i].id);\n            return true;\n        }\n    }\n    return false;\n}\n\ntests[\"Response list does contains added booking object\"] = !contains(jsonData.list);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485706997740,
			"name": "GET bookings after remove",
			"description": "Endpoint used to get bookings list.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "7379c63a-1d3e-c39a-0a72-dbf71c42e25e",
			"headers": "",
			"url": "{{url}}/api/services",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"'list' in response body\"] = jsonData.list;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testServiceName){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does not contain added service name\"] = !contains(jsonData.list);\n\npostman.clearEnvironmentVariable('testServiceName');\npostman.clearEnvironmentVariable('testServiceDescription');\npostman.clearEnvironmentVariable('testServicePrice');\npostman.clearEnvironmentVariable('token');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485705389124,
			"name": "GET services when deleted",
			"description": "Endpoint used to get services list.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "755cf0f9-0159-7ffa-78b7-2b3819468b7b",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Edited' in response\"] = jsonData.message.has('Edited');\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867478177,
			"name": "PUT users",
			"description": "Endpoint used to edit user data.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "81a56c17-7a1e-4f25-80f1-c029cd0fa408",
			"headers": "",
			"url": "{{url}}/api/services",
			"preRequestScript": "function randomizeString()\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\nfunction randomizeNumber(){\n        var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testServiceName');\npostman.setEnvironmentVariable('testServiceDescription',randomizeString());\npostman.setEnvironmentVariable('testServicePrice',randomizeString());",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702165647,
			"name": "POST services no token",
			"description": "Endpoint used to create new service.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"service\": {\n\t\t\"name\": \"{{testServiceName}}\",\n\t\t\"description\": \"{{testServiceDescription}}\",\n\t\t\"price\": \"{{testServicePrice}}\"\n\t}\n}"
		},
		{
			"id": "89be3fa3-9786-53c1-34b0-77de8516a5e7",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484999383462,
			"name": "DELETE users:login no token",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "8dbd2f7a-aa6a-b8c3-fe82-6fea063c73a9",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings/{{testBookingId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given description\"] = jsonData.description === environment.testBookingDescription;\ntests[\"Booking object contains given userLogin\"] = jsonData.userLogin === environment.testBookingLogin;\ntests[\"Booking object contains given date\"] = jsonData.date === environment.testBookingDate;\ntests[\"Booking object contains given serviceName\"] = jsonData.serviceName === environment.testBookingServiceName;\ntests[\"Booking object contains given id\"] = jsonData.id === environment.testBookingId;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485706922676,
			"name": "GET bookings:id",
			"description": "Request should return booking information.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "8ef1d981-76aa-0d3e-d0a7-e11753fe7aff",
			"headers": "",
			"url": "{{url}}/api/services",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"'list' in response body\"] = jsonData.list;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testServiceName){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does contains added service name\"] = contains(jsonData.list);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485701939486,
			"name": "GET services",
			"description": "Endpoint used to get services list.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "8f9b4231-346e-bc97-dedb-e891872bfa95",
			"headers": "",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702550219,
			"name": "DELETE services:name no token",
			"description": "Endpoint used to remove selected service\n.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "907f1780-5673-5d0e-a51d-b2c435695ff9",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867860443,
			"name": "PUT users no token",
			"description": "Endpoint used to edit user data.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "96535e18-895c-90d9-0f34-95c54b487dfe",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given login\"] = jsonData.login === environment.testUserLogin;\ntests[\"Response contains given firstName\"] = jsonData.firstName === environment.testFirstName;\ntests[\"Response contains given lastName\"] = jsonData.lastName === environment.testLastName;\ntests[\"Response contains given email\"] = jsonData.email === environment.testEmail;\ntests[\"Response contains given permissions\"] = jsonData.permissions.canManageUsers === jsonData.permissions.canManageBookings === jsonData.permissions.canManageServices === false;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867475428,
			"name": "GET users/:login",
			"description": "Endpoint used to get user details",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "a578f1ed-6802-b0d0-5fa4-22101c82eb26",
			"headers": "Auth-Token: {{token_2}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926637823,
			"name": "DELETE users:login unauthorized",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "aa79edc9-1772-852d-522b-9649094bb40b",
			"headers": "Auth-Token: {{token_2}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926633668,
			"name": "PUT users unauthorized",
			"description": "Endpoint used to edit user data.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "b1e5f914-2465-3c6c-8655-fcd95b0b8225",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"'list' in response body\"] = jsonData.list;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        tests[\"Booking object contains userLogin\"] = givenJsonArray[i].userLogin;\n        tests[\"Booking object contains date\"] = givenJsonArray[i].date;\n        tests[\"Booking object contains serviceName\"] = givenJsonArray[i].serviceName;\n        tests[\"Booking object contains id\"] = givenJsonArray[i].id;\n        if(givenJsonArray[i].userLogin === environment.testUserLogin &&\n        givenJsonArray[i].date === environment.testBookingDate &&\n        givenJsonArray[i].serviceName === environment.testBookingServiceName){\n            postman.setEnvironmentVariable(\"testBookingId\", givenJsonArray[i].id);\n            return true;\n        }\n    }\n    return false;\n}\n\ntests[\"Response list does contains added booking object\"] = contains(jsonData.list);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485709469623,
			"name": "GET bookings copy",
			"description": "Endpoint used to get bookings list.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "c027d9f2-fde0-45a0-9c73-ae3d2478a7fc",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testUserLogin');\npostman.setEnvironmentVariable('testUserLogin',randomizeString());\npostman.setEnvironmentVariable('testPassword',randomizeString());\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867465809,
			"name": "POST users copy",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"folder": "ff6fbd67-f57e-80ff-cba6-f1cea4ecb578",
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "c59cd169-35cf-1cab-864f-6f4fc6f417a9",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings/{{testBookingId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485709259328,
			"name": "DELETE bookings:id copy",
			"description": "Endpoint used to remove selected service\n.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "c66abdf0-d685-c1dd-3216-bd49511c2fe1",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('testUserLogin');\npostman.clearEnvironmentVariable('testUserLogin');\npostman.clearEnvironmentVariable('testPassword');\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.clearEnvironmentVariable('token_2');\npostman.clearEnvironmentVariable('token');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485705391804,
			"name": "DELETE users:login 2",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "c675cc9b-b2ca-94f3-0412-06f4be072a3d",
			"headers": "Auth-Token: {{token_2}}\n",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "function randomizeString()\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\nfunction randomizeDate(){\n        var date = \"\";\n        date += '20' + Math.floor(16 + Math.random() * 80) + '-1' + Math.floor(Math.random() * 2) + '-' + Math.floor(10 + Math.random() * 18);\n    return date;\n}\npostman.clearEnvironmentVariable('testServiceName');\npostman.setEnvironmentVariable('testBookingLogin',randomizeString());\npostman.setEnvironmentVariable('testBookingDate',randomizeDate());\npostman.setEnvironmentVariable('testBookingServiceName',randomizeString());\npostman.setEnvironmentVariable('testBookingDescription',randomizeString());",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Forbidden' in response\"] = jsonData.message === 'Forbidden';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485707249271,
			"name": "POST bookings no permissions",
			"description": "Endpoint used to create new booking.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"booking\": {\n\t\t\"userLogin\": \"{{testBookingLogin}}\",\n\t\t\"date\": \"{{testBookingDate}}\",\n\t\t\"serviceName\": \"{{testBookingServiceName}}\",\n\t\t\"description\": \"{{testBookingDescription}}\"\n\t}\n}"
		},
		{
			"id": "ce0c3d9d-ef4b-5a22-b313-cd5d4bdb8130",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/services/{{testServiceName}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given name\"] = jsonData.name === environment.testServiceName;\ntests[\"Response contains given price\"] = jsonData.price == environment.testServicePrice;\ntests[\"Response contains given description\"] = jsonData.description === environment.testServiceDescription;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702422309,
			"name": "GET services:name",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "cff0809c-0bde-ef22-c446-1b9101b1b837",
			"headers": "",
			"url": "{{url}}/api/bookings/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485707255746,
			"name": "DELETE bookings:id no token",
			"description": "Endpoint used to remove selected booking.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "d6506729-26cf-5c62-b8b4-96d768c751b2",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867682139,
			"name": "GET users no token",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "dab3ae79-46e2-ad96-1344-9b8e59ba57f6",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\ntests[\"Body contains list\"] = responseBody.has(\"list\");\n\nvar schema = {\n \"list\": {\n \"type\": \"array\"\n }\n};\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Valid Response\"] = tv4.validate(jsonData, schema);\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testUserLogin){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does contains added user login\"] = contains(jsonData.list);\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867472985,
			"name": "GET users",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e608dfa3-d9b9-bef1-fca5-02ecc1891a64",
			"headers": "",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "function randomizeString()\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\nfunction randomizeDate(){\n        var date = \"\";\n        date += '20' + Math.floor(16 + Math.random() * 80) + '-1' + Math.floor(Math.random() * 2) + '-' + Math.floor(10 + Math.random() * 18);\n    return date;\n}\npostman.clearEnvironmentVariable('testServiceName');\npostman.setEnvironmentVariable('testBookingLogin',randomizeString());\npostman.setEnvironmentVariable('testBookingDate',randomizeDate());\npostman.setEnvironmentVariable('testBookingServiceName',randomizeString());\npostman.setEnvironmentVariable('testBookingDescription',randomizeString());",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485706511545,
			"name": "POST bookings no token",
			"description": "Endpoint used to create new booking.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"booking\": {\n\t\t\"userLogin\": \"{{testBookingLogin}}\",\n\t\t\"date\": \"{{testBookingDate}}\",\n\t\t\"serviceName\": \"{{testBookingServiceName}}\",\n\t\t\"description\": \"{{testBookingDescription}}\"\n\t}\n}"
		},
		{
			"id": "e9242e1f-6145-8322-39be-28c7f864a2da",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/services/{{testServiceName}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485702545746,
			"name": "DELETE services:name",
			"description": "Endpoint used to remove selected service\n.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "ea0e81fc-f9fc-0eb6-2fc2-0efa34294197",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('testUserLogin');\npostman.clearEnvironmentVariable('testUserLogin');\npostman.clearEnvironmentVariable('testPassword');\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.clearEnvironmentVariable('token_2');\npostman.clearEnvironmentVariable('token');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485705391804,
			"name": "DELETE users:login 2 copy",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"folder": "ff6fbd67-f57e-80ff-cba6-f1cea4ecb578"
		},
		{
			"id": "f1f67fc7-5de0-e209-cd14-f121b4debb56",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "function randomizeString()\n{\n    var rndmString = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        rndmString += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return rndmString;\n}\nfunction randomizeDate(){\n        var date = \"\";\n        date += '20' + Math.floor(16 + Math.random() * 80) + '-1' + Math.floor(Math.random() * 2) + '-' + Math.floor(10 + Math.random() * 18);\n    return date;\n}\npostman.clearEnvironmentVariable('testServiceName');\npostman.setEnvironmentVariable('testBookingLogin',randomizeString());\npostman.setEnvironmentVariable('testBookingDate',randomizeDate());\npostman.setEnvironmentVariable('testBookingServiceName',randomizeString());\npostman.setEnvironmentVariable('testBookingDescription',randomizeString());",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485709112600,
			"name": "POST bookings copy",
			"description": "Endpoint used to create new booking.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"booking\": {\n\t\t\"userLogin\": \"{{testUserLogin}}\",\n\t\t\"date\": \"{{testBookingDate}}\",\n\t\t\"serviceName\": \"{{testBookingServiceName}}\",\n\t\t\"description\": \"{{testBookingDescription}}\"\n\t}\n}"
		},
		{
			"id": "f2e0b77e-7a55-6bc2-d8cf-4670471ecb01",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/bookings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"'list' in response body\"] = jsonData.list;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        tests[\"Booking object contains userLogin\"] = givenJsonArray[i].userLogin;\n        tests[\"Booking object contains date\"] = givenJsonArray[i].date;\n        tests[\"Booking object contains serviceName\"] = givenJsonArray[i].serviceName;\n        tests[\"Booking object contains id\"] = givenJsonArray[i].id;\n        if(givenJsonArray[i].userLogin === environment.testBookingLogin &&\n        givenJsonArray[i].date === environment.testBookingDate &&\n        givenJsonArray[i].serviceName === environment.testBookingServiceName){\n            postman.setEnvironmentVariable(\"testBookingId\", givenJsonArray[i].id);\n            return true;\n        }\n    }\n    return false;\n}\n\ntests[\"Response list does contains added booking object\"] = contains(jsonData.list);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485707000086,
			"name": "GET bookings",
			"description": "Endpoint used to get bookings list.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "ff11ccbb-9bca-f229-1a8b-fd61c2fa5847",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given login\"] = jsonData.login === environment.testUserLogin;\ntests[\"Response contains given firstName\"] = jsonData.firstName === environment.testFirstName;\ntests[\"Response contains given lastName\"] = jsonData.lastName === environment.testLastName;\ntests[\"Response contains given email\"] = jsonData.email === environment.testEmail;\ntests[\"Response contains given permissions\"] = jsonData.permissions.canManageUsers === jsonData.permissions.canManageBookings === jsonData.permissions.canManageServices === false;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867480778,
			"name": "GET users/:login after edit",
			"description": "Endpoint used to get user details",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "ff4b02ee-36b7-051f-32ca-af62e896caef",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testUserLogin');\npostman.setEnvironmentVariable('testUserLogin',randomizeString());\npostman.setEnvironmentVariable('testPassword',randomizeString());\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484926624906,
			"name": "POST users 2",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		}
	]
}
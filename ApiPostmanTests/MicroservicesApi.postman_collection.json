{
	"id": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
	"name": "MicroservicesApi",
	"description": "Collection to test API responses in application Microservices Booking",
	"order": [],
	"folders": [
		{
			"id": "1b520b3d-db2e-d6a9-2f9b-d03bed49afd0",
			"name": "Endpoint users",
			"description": "Endpoint used to perform actions on users data.\nFrom this endpoint you can create, edit and delete users. You can also get users list and get details about user.",
			"order": [
				"2a442cf1-3ac3-aedb-4085-afb1e99cd530",
				"31804830-93fe-3500-b073-264792c0bd06",
				"7163699c-e9fb-ffcd-07f4-9ed131e1efa2",
				"dab3ae79-46e2-ad96-1344-9b8e59ba57f6",
				"d6506729-26cf-5c62-b8b4-96d768c751b2",
				"96535e18-895c-90d9-0f34-95c54b487dfe",
				"907f1780-5673-5d0e-a51d-b2c435695ff9",
				"755cf0f9-0159-7ffa-78b7-2b3819468b7b",
				"ff11ccbb-9bca-f229-1a8b-fd61c2fa5847",
				"89be3fa3-9786-53c1-34b0-77de8516a5e7",
				"260a5ca2-d8f7-4717-be3a-9eefb8517760",
				"2eb5c01e-1219-5493-e3c9-57a026ad6e44",
				"5333b76e-3ff3-c16c-748d-2720047d6ec0",
				"47dc3f62-2963-8ba3-6b09-3d0e92924165"
			],
			"owner": "493551",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f"
		}
	],
	"timestamp": 1483375387846,
	"owner": "493551",
	"public": false,
	"requests": [
		{
			"id": "260a5ca2-d8f7-4717-be3a-9eefb8517760",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867485308,
			"name": "DELETE users:login",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "2a442cf1-3ac3-aedb-4085-afb1e99cd530",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/authenticate",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testUserLogin');\npostman.setEnvironmentVariable('testUserLogin',randomizeString());\npostman.setEnvironmentVariable('testPassword',randomizeString());\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains token\"] = jsonData.token;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\npostman.clearEnvironmentVariable('token');\npostman.setEnvironmentVariable(\"token\", jsonData.token);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867461750,
			"name": "POST authenticate",
			"description": "Endpoint used to login to application and recieve token.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n\t\t\"login\": \"pbubel\",\n\t\t\"password\": \"pbubel\"\n}"
		},
		{
			"id": "2eb5c01e-1219-5493-e3c9-57a026ad6e44",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\ntests[\"Body contains list\"] = responseBody.has(\"list\");\n\nvar schema = {\n \"list\": {\n \"type\": \"array\"\n }\n};\nvar jsonData = JSON.parse(responseBody);\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testUserLogin){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does not contain removed user login\"] = !contains(jsonData.list);\n\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867487887,
			"name": "GET users when deleted",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n  \"user\":{\n  \"password\": \"aaa\",\n  \"firstName\": \"aaa\",\n  \"lastName\": \"aaa\",\n  \"canManageServices\": true,\n  \"canManageUsers\": true\n}}"
		},
		{
			"id": "31804830-93fe-3500-b073-264792c0bd06",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testUserLogin');\npostman.setEnvironmentVariable('testUserLogin',randomizeString());\npostman.setEnvironmentVariable('testPassword',randomizeString());\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867465809,
			"name": "POST users",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "47dc3f62-2963-8ba3-6b09-3d0e92924165",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Document failed validation' in response\"] = jsonData.message === 'Users Database error: Document failed validation';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867494974,
			"name": "POST users wrong login",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"a test !@#$\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "5333b76e-3ff3-c16c-748d-2720047d6ec0",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Document failed validation' message in response\"] = jsonData.message === 'Users Database error: Document failed validation';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867491011,
			"name": "POST users wrong body",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\"\n\t}\n}"
		},
		{
			"id": "7163699c-e9fb-ffcd-07f4-9ed131e1efa2",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'duplicate' in response\"] = jsonData.message.has('duplicate');\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867469221,
			"name": "POST users duplicated login",
			"description": "Endpoint used to create new user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "755cf0f9-0159-7ffa-78b7-2b3819468b7b",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Edited' in response\"] = jsonData.message.has('Edited');\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867478177,
			"name": "PUT users",
			"description": "Endpoint used to edit user data.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "89be3fa3-9786-53c1-34b0-77de8516a5e7",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867677089,
			"name": "DELETE users:login no token",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "907f1780-5673-5d0e-a51d-b2c435695ff9",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867860443,
			"name": "PUT users no token",
			"description": "Endpoint used to edit user data.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "96535e18-895c-90d9-0f34-95c54b487dfe",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given login\"] = jsonData.login === environment.testUserLogin;\ntests[\"Response contains given firstName\"] = jsonData.firstName === environment.testFirstName;\ntests[\"Response contains given lastName\"] = jsonData.lastName === environment.testLastName;\ntests[\"Response contains given email\"] = jsonData.email === environment.testEmail;\ntests[\"Response contains given permissions\"] = jsonData.permissions.canManageUsers === jsonData.permissions.canManageBookings === jsonData.permissions.canManageServices === false;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867475428,
			"name": "GET users/:login",
			"description": "Endpoint used to get user details",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		},
		{
			"id": "d6506729-26cf-5c62-b8b4-96d768c751b2",
			"headers": "//Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\ntests[\"Status code name has string Forbidden\"] = responseCode.name.has(\"Forbidden\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867682139,
			"name": "GET users no token",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "dab3ae79-46e2-ad96-1344-9b8e59ba57f6",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\ntests[\"Body contains list\"] = responseBody.has(\"list\");\n\nvar schema = {\n \"list\": {\n \"type\": \"array\"\n }\n};\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Valid Response\"] = tv4.validate(jsonData, schema);\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testUserLogin){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does contains added user login\"] = contains(jsonData.list);\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867472985,
			"name": "GET users",
			"description": "Request should return list of avaliable users.",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "ff11ccbb-9bca-f229-1a8b-fd61c2fa5847",
			"headers": "Auth-Token: {{token}}\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given login\"] = jsonData.login === environment.testUserLogin;\ntests[\"Response contains given firstName\"] = jsonData.firstName === environment.testFirstName;\ntests[\"Response contains given lastName\"] = jsonData.lastName === environment.testLastName;\ntests[\"Response contains given email\"] = jsonData.email === environment.testEmail;\ntests[\"Response contains given permissions\"] = jsonData.permissions.canManageUsers === jsonData.permissions.canManageBookings === jsonData.permissions.canManageServices === false;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1484867480778,
			"name": "GET users/:login after edit",
			"description": "Endpoint used to get user details",
			"collectionId": "39fe3057-8b8c-93ab-50c7-24832b38b11f",
			"responses": []
		}
	]
}
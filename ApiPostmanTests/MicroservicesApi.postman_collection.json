{
	"id": "42fe490a-b046-3015-5f12-32dbf2a16564",
	"name": "MicroservicesApi",
	"description": "Collection to test API responses in application Microservices Booking",
	"order": [],
	"folders": [
		{
			"id": "cc8d6d8e-f440-e507-fcc3-81401b49777d",
			"name": "Endpoint users",
			"description": "Endpoint used to perform actions on users data.\nFrom this endpoint you can create, edit and delete users. You can also get users list and get details about user.",
			"order": [
				"7f3c0264-d7e6-a4f8-0efa-c23685c46b16",
				"a418f674-ed19-583a-ed8b-db2bfe66a284",
				"2497b08a-f536-6005-c289-245c13f5bda3",
				"e5a03c00-89fb-cf1b-3ef8-2a17d3504225",
				"3350144b-a928-4855-85e6-6891199b99e0",
				"60a0863a-00cb-039b-1dc6-d067e6c7c13f",
				"bb34c953-2605-bb0f-641d-4db6079508f6",
				"abaa8dbc-1cfb-9f0a-3c39-d0d472d377ee",
				"f5a5ae6b-84ff-e24e-d81d-573ad8011554",
				"aa366cf0-3652-885e-a38a-03a24afe6466"
			],
			"owner": "493551",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564"
		}
	],
	"timestamp": 1483375387846,
	"owner": "493551",
	"public": false,
	"requests": [
		{
			"id": "2497b08a-f536-6005-c289-245c13f5bda3",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n//Authorization: Basic Og==\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\ntests[\"Body contains list\"] = responseBody.has(\"list\");\n\nvar schema = {\n \"list\": {\n \"type\": \"array\"\n }\n};\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Valid Response\"] = tv4.validate(jsonData, schema);\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testUserLogin){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does contains added user login\"] = contains(jsonData.list);\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391188108,
			"name": "GET users",
			"description": "Request should return list of avaliable users.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n  \"user\":{\n  \"password\": \"dupka\",\n  \"firstName\": true,\n  \"lastName\": true,\n  \"canManageServices\": true,\n  \"canManageUsers\": true\n}}"
		},
		{
			"id": "3350144b-a928-4855-85e6-6891199b99e0",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testFirstName');\npostman.clearEnvironmentVariable('testLastName');\npostman.clearEnvironmentVariable('testEmail');\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Edited' in response\"] = jsonData.message.has('Edited');\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391187356,
			"name": "PUT users",
			"description": "Endpoint used to edit user data.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "60a0863a-00cb-039b-1dc6-d067e6c7c13f",
			"headers": "",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given login\"] = jsonData.login === environment.testUserLogin;\ntests[\"Response contains given firstName\"] = jsonData.firstName === environment.testFirstName;\ntests[\"Response contains given lastName\"] = jsonData.lastName === environment.testLastName;\ntests[\"Response contains given email\"] = jsonData.email === environment.testEmail;\ntests[\"Response contains given permissions\"] = jsonData.permissions.canManageUsers === jsonData.permissions.canManageBookings === jsonData.permissions.canManageServices === false;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391186995,
			"name": "GET users/:login after edit",
			"description": "Endpoint used to get user details",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": []
		},
		{
			"id": "7f3c0264-d7e6-a4f8-0efa-c23685c46b16",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "function randomizeString()\n{\n    var login = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for( var i=0; i < 10; i++ )\n        login += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return login;\n}\npostman.clearEnvironmentVariable('testUserLogin');\npostman.setEnvironmentVariable('testUserLogin',randomizeString());\npostman.setEnvironmentVariable('testPassword',randomizeString());\npostman.setEnvironmentVariable('testFirstName',randomizeString());\npostman.setEnvironmentVariable('testLastName',randomizeString());\npostman.setEnvironmentVariable('testEmail',randomizeString() + '@' + randomizeString());\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Created' in response\"] = jsonData.message === 'Created';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391189318,
			"name": "POST users",
			"description": "Endpoint used to create new user.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "a418f674-ed19-583a-ed8b-db2bfe66a284",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'duplicate' in response\"] = jsonData.message.has('duplicate');\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391188486,
			"name": "POST users duplicated login",
			"description": "Endpoint used to create new user.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "aa366cf0-3652-885e-a38a-03a24afe6466",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"'Document failed validation' in response\"] = jsonData.message === 'Users Database error: Document failed validation';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391184777,
			"name": "POST users wrong login",
			"description": "Endpoint used to create new user.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"a test !@#$\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\",\n\t\t\"permissions\":\n\t\t{\n\t\t\t\"canManageUsers\":false,\n\t\t\t\"canManageServices\":false,\n\t\t\t\"canManageBookings\":false\n\t\t}\n\t}\n}"
		},
		{
			"id": "abaa8dbc-1cfb-9f0a-3c39-d0d472d377ee",
			"headers": "//Content-Type: application/x-www-form-urlencoded\nAuthorization: Basic Og==\n",
			"url": "{{url}}/api/users",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\ntests[\"Body contains list\"] = responseBody.has(\"list\");\n\nvar schema = {\n \"list\": {\n \"type\": \"array\"\n }\n};\nvar jsonData = JSON.parse(responseBody);\n\nfunction contains(givenJsonArray)\n{\n    for( var i=0; i < givenJsonArray.length; i++ ){\n        if(givenJsonArray[i] === environment.testUserLogin){\n            return true;\n        }\n    }\n    return false;\n}\ntests[\"Response list does not contain removed user login\"] = !contains(jsonData.list);\n\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391186242,
			"name": "GET users when deleted",
			"description": "Request should return list of avaliable users.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n  \"user\":{\n  \"password\": \"dupka\",\n  \"firstName\": true,\n  \"lastName\": true,\n  \"canManageServices\": true,\n  \"canManageUsers\": true\n}}"
		},
		{
			"id": "bb34c953-2605-bb0f-641d-4db6079508f6",
			"headers": "",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 204\"] = responseCode.code === 204;\n\ntests[\"Status code name has string No content\"] = responseCode.name.has(\"No content\");\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391186644,
			"name": "DELETE users:login",
			"description": "Endpoint used to remove selected user.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": []
		},
		{
			"id": "e5a03c00-89fb-cf1b-3ef8-2a17d3504225",
			"headers": "",
			"url": "{{url}}/api/users/{{testUserLogin}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Response time is less than 200ms\"] = responseTime < 200;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Response contains given login\"] = jsonData.login === environment.testUserLogin;\ntests[\"Response contains given firstName\"] = jsonData.firstName === environment.testFirstName;\ntests[\"Response contains given lastName\"] = jsonData.lastName === environment.testLastName;\ntests[\"Response contains given email\"] = jsonData.email === environment.testEmail;\ntests[\"Response contains given permissions\"] = jsonData.permissions.canManageUsers === jsonData.permissions.canManageBookings === jsonData.permissions.canManageServices === false;\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391187724,
			"name": "GET users/:login",
			"description": "Endpoint used to get user details",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": []
		},
		{
			"id": "f5a5ae6b-84ff-e24e-d81d-573ad8011554",
			"headers": "//Content-Type: application/x-www-form-urlencoded\n",
			"url": "{{url}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;\n\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Document failed validation' message in response\"] = jsonData.message === 'Users Database error: Document failed validation';\n\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1483391185747,
			"name": "POST users wrong body",
			"description": "Endpoint used to create new user.",
			"collectionId": "42fe490a-b046-3015-5f12-32dbf2a16564",
			"responses": [],
			"rawModeData": "{\n \t\"user\": {\n\t\t\"login\": \"{{testUserLogin}}\",\n\t\t\"password\": \"{{testPassword}}\",\n\t\t\"firstName\": \"{{testFirstName}}\",\n\t\t\"lastName\": \"{{testLastName}}\",\n\t\t\"email\": \"{{testEmail}}\"\n\t}\n}"
		}
	]
}